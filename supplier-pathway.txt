diff --git a/src/prmcalculator/domain/outcome_counts/count_outcomes_per_supplier_pathway.py b/src/prmcalculator/domain/outcome_counts/count_outcomes_per_supplier_pathway.py
index a821239..6e6b94c 100644
--- a/src/prmcalculator/domain/outcome_counts/count_outcomes_per_supplier_pathway.py
+++ b/src/prmcalculator/domain/outcome_counts/count_outcomes_per_supplier_pathway.py
@@ -78,6 +78,14 @@ def _add_percentage_of_technical_failures_column(dataframe: pl.DataFrame) -> pl.
     return dataframe
 
 
+def _add_percentage_of_supplier_pathway_column(dataframe: pl.DataFrame) -> pl.DataFrame:
+    supplier_pathway_counts = dataframe.groupby(["requesting_supplier", "sending_supplier"]).agg(
+        [pl.sum("count").alias("supplier_pathway_count")]
+    )
+    print(supplier_pathway_counts)
+    return dataframe
+
+
 def count_outcomes_per_supplier_pathway(dataframe):
     outcome_counts_dataframe = (
         dataframe.with_columns(
@@ -111,5 +119,6 @@ def count_outcomes_per_supplier_pathway(dataframe):
     outcome_counts_dataframe = _add_percentage_of_technical_failures_column(
         outcome_counts_dataframe
     )
+    outcome_counts_dataframe = _add_percentage_of_supplier_pathway_column(outcome_counts_dataframe)
 
     return outcome_counts_dataframe
diff --git a/tests/unit/domain/outcome_counts/test_count_outcomes_per_supplier_pathway.py b/tests/unit/domain/outcome_counts/test_count_outcomes_per_supplier_pathway.py
index ccc2e07..a96d298 100644
--- a/tests/unit/domain/outcome_counts/test_count_outcomes_per_supplier_pathway.py
+++ b/tests/unit/domain/outcome_counts/test_count_outcomes_per_supplier_pathway.py
@@ -368,3 +368,34 @@ def test_returns_dataframe_with_percentage_of_technical_failures_rounded_to_3_de
         }
     )
     assert actual.frame_equal(expected, null_equal=True)
+
+
+@pytest.mark.filterwarnings("ignore:Conversion of")
+def test_returns_dataframe_with_percentage_of_supplier_pathway_rounded_to_3_decimal_places():
+    supplier_a = "SupplierA"
+    supplier_b = "SupplierB"
+    supplier_c = "SupplierC"
+
+    df = (
+        TransferDataFrame()
+        .with_row(requesting_supplier=supplier_a, sending_supplier=supplier_b)
+        .with_row(requesting_supplier=supplier_a, sending_supplier=supplier_b)
+        .with_row(requesting_supplier=supplier_a, sending_supplier=supplier_b)
+        .with_row(requesting_supplier=supplier_a, sending_supplier=supplier_b)
+        .with_row(requesting_supplier=supplier_b, sending_supplier=supplier_a)
+        .with_row(requesting_supplier=supplier_b, sending_supplier=supplier_a)
+        .with_row(requesting_supplier=supplier_a, sending_supplier=supplier_c)
+        .build()
+    )
+
+    actual_dataframe = count_outcomes_per_supplier_pathway(df)
+    actual = actual_dataframe[["requesting_supplier", "sending_supplier", "%_of_supplier_pathway"]]
+
+    expected = pl.from_dict(
+        {
+            "requesting_supplier": [supplier_a, supplier_b, supplier_a],
+            "sending_supplier": [supplier_b, supplier_a, supplier_c],
+            "%_of_supplier_pathway": [57.143, 28.571, 14.286],
+        }
+    )
+    assert actual.frame_equal(expected, null_equal=True)
